"use strict";(self.webpackChunktea_docs=self.webpackChunktea_docs||[]).push([[9856],{9166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"docs/technical-guide/backend-reference/management-files","title":"Backend Management Files","description":"The TEA Platform, developed using Django and the Django REST framework, comprises several Python modules that are pivotal to its operation.","source":"@site/docs/docs/technical-guide/backend-reference/management-files.md","sourceDirName":"docs/technical-guide/backend-reference","slug":"/docs/technical-guide/backend-reference/management-files","permalink":"/documentation/docs/technical-guide/backend-reference/management-files","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Backend Management Files"},"sidebar":"teaSidebar","previous":{"title":"Django Settings","permalink":"/documentation/docs/technical-guide/backend-reference/django-settings"},"next":{"title":"Postgres Database","permalink":"/documentation/docs/technical-guide/backend-reference/postgres"}}');var s=t(4848),i=t(8453);const r={sidebar_position:2,sidebar_label:"Backend Management Files"},o="Backend Management Files",c={},d=[];function l(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"backend-management-files",children:"Backend Management Files"})}),"\n",(0,s.jsx)(n.p,{children:"The TEA Platform, developed using Django and the Django REST framework, comprises several Python modules that are pivotal to its operation.\nThese modules play specific roles in defining the platform's database schema, data serialization, request handling, and URL routing.\nHere\u2019s an overview of these essential components:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Models (",(0,s.jsx)(n.a,{href:"https://github.com/alan-turing-institute/AssurancePlatform/blob/main/eap_backend/eap_api/models.py",children:(0,s.jsx)(n.code,{children:"eap_api/models.py"})}),")"]}),": This file is at the heart of defining the platform's database schema using Django's Object-Relational Mapping (ORM) system. Each class that inherits from django.db.models.Model is mapped to a database table, setting the groundwork for how data is stored, retrieved, and manipulated within the platform."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Serializers (",(0,s.jsx)(n.a,{href:"https://github.com/alan-turing-institute/AssurancePlatform/blob/main/eap_backend/eap_api/serializers.py",children:(0,s.jsx)(n.code,{children:"eap_api/serializers.py"})}),")"]}),": The serializers handle the conversion between Model instances and JSON, making it possible for the platform\u2019s data to be easily transferred over the web. This file ensures that complex model instances can be transformed into a format that can be understood by the frontend and vice versa."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Views (",(0,s.jsx)(n.a,{href:"https://github.com/alan-turing-institute/AssurancePlatform/blob/main/eap_backend/eap_api/views.py",children:(0,s.jsx)(n.code,{children:"eap_api/views.py"})}),")"]}),": The views module defines the logic for each API endpoint, dictating how requests are processed and how data is returned to the client. Special attention is given to requests that require nested JSON structures, employing a recursive function get_json_tree to assemble the comprehensive data structure for assurance cases and their related components."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["URLs (",(0,s.jsx)(n.a,{href:"https://github.com/alan-turing-institute/AssurancePlatform/blob/main/eap_backend/eap_api/urls.py",children:(0,s.jsx)(n.code,{children:"eap_api/urls.py"})}),")"]}),": This module maps the available API endpoints to their corresponding view functions in views.py, establishing the routes that clients interact with. It acts as the web-facing interface of the backend, directing incoming requests to the appropriate handlers based on the requested URL path."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Understanding these modules and their functions within the Django framework provides a solid foundation for contributing to or extending the TEA Platform. Each plays a crucial role in ensuring the platform's backend operates efficiently, securely, and in harmony with the frontend application."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);